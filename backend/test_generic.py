#!/usr/bin/env python3
"""
Teste abrangente para verificar se o processador spaCy+textacy √© gen√©rico
e funciona com diferentes dom√≠nios/t√≥picos
"""
import os
import sys
import json
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from model.spacy_textacy_processor import SpacyTextacyProcessor

def test_domain_genericity():
    """Testa o processador com diferentes dom√≠nios para verificar genericidade"""
    print("=== Teste de Genericidade do Processador spaCy+textacy ===\n")
    
    try:
        processor = SpacyTextacyProcessor()
        print("‚úì Processador inicializado com sucesso\n")
        
        # Diferentes dom√≠nios de teste
        test_domains = {
            "üè• Sa√∫de/Medicina": {
                "text": """
                O sistema hospitalar deve permitir que o m√©dico registe diagn√≥sticos dos pacientes.
                O enfermeiro pode actualizar os registos m√©dicos e agendar tratamentos.
                Os pacientes podem consultar os seus exames e marcar consultas.
                O laborat√≥rio deve processar an√°lises e gerar relat√≥rios de resultados.
                """,
                "expected_entities": ["m√©dico", "pacientes", "enfermeiro", "laborat√≥rio", "sistema", "diagn√≥sticos", "registos", "tratamentos", "exames", "consultas", "an√°lises", "relat√≥rios"]
            },
            
            "üéì Educa√ß√£o": {
                "text": """
                A plataforma educativa deve permitir que o professor crie disciplinas e publique conte√∫dos.
                Os estudantes podem inscrever-se em disciplinas e submeter trabalhos.
                O sistema deve calcular notas e gerar boletins de avalia√ß√£o.
                Os coordenadores podem gerir curr√≠culos e aprovar disciplinas.
                """,
                "expected_entities": ["professor", "estudantes", "coordenadores", "plataforma", "disciplinas", "conte√∫dos", "trabalhos", "notas", "boletins", "curr√≠culos"]
            },
            
            "üè≠ Manufatura/Produ√ß√£o": {
                "text": """
                O sistema de produ√ß√£o deve controlar m√°quinas e monitorizar processos de fabrico.
                Os operadores podem iniciar opera√ß√µes e registar defeitos nos produtos.
                O controlo de qualidade deve inspeccionar lotes e aprovar shipments.
                Os t√©cnicos fazem manuten√ß√£o preventiva dos equipamentos.
                """,
                "expected_entities": ["sistema", "m√°quinas", "operadores", "produtos", "controlo", "lotes", "t√©cnicos", "processos", "opera√ß√µes", "defeitos", "equipamentos"]
            },
            
            "üè™ Com√©rcio Electr√≥nico": {
                "text": """
                A loja online deve permitir que os clientes naveguem pelo cat√°logo e fa√ßam encomendas.
                Os vendedores podem adicionar produtos e gerir invent√°rio.
                O sistema de pagamento processa transac√ß√µes e emite facturas.
                Os gestores analisam vendas e configuram promo√ß√µes.
                """,
                "expected_entities": ["loja", "clientes", "vendedores", "gestores", "cat√°logo", "encomendas", "produtos", "invent√°rio", "pagamento", "transac√ß√µes", "facturas", "vendas", "promo√ß√µes"]
            },
            
            "üåæ Agricultura": {
                "text": """
                O sistema agr√≠cola deve monitorizar culturas e controlar irriga√ß√£o.
                Os agricultores registam planta√ß√µes e aplicam fertilizantes.
                Os sensores recolhem dados meteorol√≥gicos e da humidade do solo.
                O sistema gera alertas sobre pragas e doen√ßas das plantas.
                """,
                "expected_entities": ["sistema", "agricultores", "sensores", "culturas", "irriga√ß√£o", "planta√ß√µes", "fertilizantes", "dados", "alertas", "pragas", "plantas"]
            },
            
            "üöó Transportes": {
                "text": """
                A aplica√ß√£o de transportes permite que os passageiros reservem viagens.
                Os condutores podem aceitar corridas e actualizar o estado da viagem.
                O sistema calcula rotas optimizadas e estima tempos de chegada.
                Os administradores gerem frotas e analisam m√©tricas de performance.
                """,
                "expected_entities": ["aplica√ß√£o", "passageiros", "condutores", "administradores", "viagens", "corridas", "sistema", "rotas", "frotas", "m√©tricas"]
            },
            
            "üè¶ Banca/Finan√ßas": {
                "text": """
                O sistema banc√°rio deve processar transfer√™ncias e validar transac√ß√µes.
                Os clientes podem consultar saldos e solicitar empr√©stimos.
                Os gestores de conta analisam riscos e aprovam cr√©ditos.
                O sistema gera extractos mensais e calcula juros.
                """,
                "expected_entities": ["sistema", "clientes", "gestores", "transfer√™ncias", "transac√ß√µes", "saldos", "empr√©stimos", "riscos", "cr√©ditos", "extractos", "juros"]
            }
        }
        
        results = {}
        total_success = 0
        
        for domain_name, domain_data in test_domains.items():
            print(f"üîÑ Testando dom√≠nio: {domain_name}")
            print(f"üìù Texto: {domain_data['text'][:100]}...")
            
            try:
                result = processor.extract_domain_entities(domain_data['text'])
                
                if "error" in result:
                    print(f"‚ùå Erro: {result['error']}\n")
                    results[domain_name] = {"success": False, "error": result['error']}
                    continue
                
                # Analisar resultado
                content = json.loads(result['content'])
                classes = content.get('classes', [])
                extracted_entities = [cls['nome'].lower() for cls in classes]
                
                print(f"‚úÖ Classes extra√≠das ({len(classes)}): {', '.join([cls['nome'] for cls in classes])}")
                
                # Verificar se captou entidades esperadas
                expected = domain_data['expected_entities']
                found_entities = []
                for expected_entity in expected:
                    if any(expected_entity.lower() in entity.lower() or entity.lower() in expected_entity.lower() 
                           for entity in extracted_entities):
                        found_entities.append(expected_entity)
                
                coverage = len(found_entities) / len(expected) * 100 if expected else 0
                print(f"üìä Cobertura de entidades esperadas: {coverage:.1f}% ({len(found_entities)}/{len(expected)})")
                
                if coverage > 30:  # Pelo menos 30% das entidades esperadas
                    print(f"‚úÖ Dom√≠nio processado com sucesso")
                    total_success += 1
                else:
                    print(f"‚ö†Ô∏è  Cobertura baixa - pode n√£o estar a captar entidades espec√≠ficas do dom√≠nio")
                
                results[domain_name] = {
                    "success": True,
                    "classes_count": len(classes),
                    "coverage": coverage,
                    "extracted_entities": extracted_entities,
                    "found_expected": found_entities
                }
                
            except Exception as e:
                print(f"‚ùå Erro durante processamento: {str(e)}")
                results[domain_name] = {"success": False, "error": str(e)}
            
            print()
        
        # Sum√°rio final
        print("=" * 70)
        print("üìã RESUMO DOS RESULTADOS")
        print("=" * 70)
        
        total_domains = len(test_domains)
        success_rate = (total_success / total_domains) * 100
        
        print(f"üéØ Dom√≠nios testados: {total_domains}")
        print(f"‚úÖ Dom√≠nios processados com sucesso: {total_success}")
        print(f"üìä Taxa de sucesso: {success_rate:.1f}%")
        print()
        
        # An√°lise de genericidade
        if success_rate >= 85:
            print("üéâ MODELO ALTAMENTE GEN√âRICO - Funciona bem com diversos dom√≠nios")
        elif success_rate >= 70:
            print("‚úÖ MODELO RAZOAVELMENTE GEN√âRICO - Funciona com a maioria dos dom√≠nios")
        elif success_rate >= 50:
            print("‚ö†Ô∏è  MODELO PARCIALMENTE GEN√âRICO - Funciona com alguns dom√≠nios")
        else:
            print("‚ùå MODELO N√ÉO GEN√âRICO - Limitado a dom√≠nios espec√≠ficos")
        
        # Detalhes por dom√≠nio
        print("\nüìä DETALHES POR DOM√çNIO:")
        for domain_name, result in results.items():
            if result["success"]:
                print(f"  {domain_name}: ‚úÖ {result['classes_count']} classes, {result['coverage']:.1f}% cobertura")
            else:
                print(f"  {domain_name}: ‚ùå Erro")
        
        return success_rate >= 70
        
    except Exception as e:
        print(f"‚ùå Erro cr√≠tico durante teste: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    try:
        success = test_domain_genericity()
        exit(0 if success else 1)
    except Exception as e:
        print(f"‚ùå Erro durante o teste: {str(e)}")
        import traceback
        traceback.print_exc()
        exit(1)

if __name__ == "__main__":
    success = test_generic_domains()
    exit(0 if success else 1)
